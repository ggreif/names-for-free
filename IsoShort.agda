-- Proof that forall functor F, (โ {A} โ A โ F A) โ F ๐

open import Type
open import Function.NP
open import Relation.Binary.Logical hiding (โฆโโง) renaming (โฆโโโง to โฆโโง; โฆโคโง to โฆ๐โง)
open import Relation.Binary.PropositionalEquality using (_โก_; subst)
open import Data.Unit renaming (โค to ๐)

module IsoShort
         {F  : โ โ โ}
         (Fแตฃ : (โฆโโง โฆโโง โฆโโง) F F)
         {mapF  : โ {A B} โ (A โ B) โ F A โ F B}
         (mapFแตฃ : (โโจ Aแตฃ โถ โฆโโง โฉโฆโโง โโจ Bแตฃ โถ โฆโโง โฉโฆโโง (Aแตฃ โฆโโง Bแตฃ) โฆโโง Fแตฃ Aแตฃ โฆโโง Fแตฃ Bแตฃ) mapF mapF)
         (mapF-id : โ {A} โ mapF {A} id โก id)
         where

  f : (โ {A} โ A โ F A) โ F ๐
  f ฮฑ = ฮฑ tt
  
  fโปยน : F ๐ โ (โ {A} โ A โ F A)
  fโปยน t b = mapF (ฮป _ โ b) t

  module _
         {X  : โ}
         {Xแตฃ : โฆโโง X X}
         {t u : F X} where
    subst-mapF-id : Fแตฃ Xแตฃ t (mapF id u) โ Fแตฃ Xแตฃ t u
    subst-mapF-id = subst (ฮป C โ Fแตฃ Xแตฃ t (C u)) mapF-id

  STโTS-id : โ {t : F ๐} (tแตฃ : Fแตฃ โฆ๐โง t t) โ Fแตฃ โฆ๐โง (f (fโปยน t)) t
  STโTS-id = subst-mapF-id โ mapFแตฃ _ _ _

  module _
         (ฮฑ  : โ {X} โ X โ F X)
         (ฮฑแตฃ : (โโจ Xแตฃ โถ โฆโโง โฉโฆโโง Xแตฃ โฆโโง Fแตฃ Xแตฃ) ฮฑ ฮฑ)
         (X  : โ)
         (Xแตฃ : โฆโโง X X)
         (x  : X)
         (xแตฃ : Xแตฃ x x)
         where

    TSโST-id : Fแตฃ Xแตฃ ((fโปยน โ f) ฮฑ x) (ฮฑ x)
    TSโST-id = subst-mapF-id (mapFแตฃ _ _ id (ฮฑแตฃ _ xแตฃ))
