{-# OPTIONS --type-in-type #-}
module Iso where

open import Type
open import Function
open import Data.Sum.NP renaming (map to map-โ; โฆmapโง to โฆmap-โโง)
open import Relation.Binary.Logical hiding (โฆโโง) renaming (โฆโโโง to โฆโโง ; โฆโคโง to โฆ๐โง)
open import Relation.Unary.Logical hiding ([โ]) renaming ([โโ] to [โ] ; [โค] to [๐])
open import Relation.Binary.PropositionalEquality hiding ([_])
open import Data.Nat
open import Data.Maybe.NP
open import Data.Empty -- renaming (โฅ to ๐)
open import Data.Unit renaming (โค to ๐)
open import Data.Nat.Logical
open import Relation.Binary
open import Relation.Binary.Simple using (Const)

-- Always : โ {a b c} {A : Set a} {B : Set b} โ REL A B c
Always : โ {A : โ} {B : โ} โ REL A B _
Always = Const ๐

{-

ฮฑ(X) : X โ F X

        ฮฑ(X)
   X ---------โ F X
   โ            โ
  R|            |F R
   โ            โ
   Y ---------โ F Y
        ฮฑ(Y)

        ฮฑ(X)
   X ---------โ F X
   |            |
  f|            |F f
   โ            โ
   Y ---------โ F Y
        ฮฑ(Y)

K x y = x

Given X:โ, x:X

         ฮฑ(๐)
    ๐ ---------โ F ๐
    |            |
 K x|            |F(K x)
    โ            โ
    X ---------โ F X
         ฮฑ(X)
-}

module RelOf {A B : โ} (Bแตฃ : โฆโโง B B) where
    โจ_โฉ : (f : A โ B) โ A โ B โ โ
    โจ f โฉ x y = Bแตฃ (f x) y

module Fโกid
  (s  : โ {A} โ A โ A)
  (sแตฃ : (โโจ Aแตฃ โถ โฆโโง โฉโฆโโง Aแตฃ โฆโโง Aแตฃ) s s)
  (A  : โ)  
  where

  sโid : โ (x : A) โ s x โก x
  sโid x = sแตฃ {๐} (\_ y โ y โก x) refl 

module FโกMaybe
  (s  : โ {A} โ A โ Maybe A)
  (sแตฃ : (โโจ Aแตฃ โถ โฆโโง โฉโฆโโง  Aแตฃ โฆโโง โฆMaybeโง Aแตฃ) s s)
  (A  : โ)
  where

  S = โ {W} โ W โ Maybe W 
  โฆSโง = โโจ Bแตฃ โถ โฆโโง โฉโฆโโง Bแตฃ โฆโโง โฆMaybeโง Bแตฃ

  T = Maybe ๐
  โฆTโง = โฆMaybeโง โฆ๐โง

  TS : T โ S
  TS (just tt) = just 
  TS nothing = ฮป x โ nothing

  ST : S โ T
  ST s = s tt

  test : {!!}
  test = {!sR (\x โ !} 


module MaybeF 
  (s : โ {W} โ W โ Maybe W)
  (sR : (โโจ Aแตฃ โถ [โ] โฉ[โ]  Aแตฃ [โ] [Maybe] Aแตฃ) s)
  (A : โ)
    where

  S = โ {W} โ W โ Maybe W 
  [S] = โโจ Bแตฃ โถ [โ] โฉ[โ] Bแตฃ [โ] [Maybe] Bแตฃ

  T = Maybe ๐
  [T] = [Maybe] [๐]

  TS : T โ S
  TS (just tt) = just 
  TS nothing = ฮป x โ nothing

  ST : S โ T
  ST s = s tt

  u' : โ (x : A) โ [Maybe] (ฮป y โ y โก x) (s x)
  u' x = sR (ฮป y โ y โก x) refl


  u'' : โ (x : A) โ [Maybe] (ฮป y โ y โก x) (s x)
  u'' x = sR (ฮป y โ y โก x) refl


  lem : (x : A) โ [Maybe] (ฮป y โ y โก x) (s x) โ s x โก just x โ s x โก nothing
  lem  x t with s x
  lem x nothing | .nothing = injโ refl
  lem x (just {xโ} xโ) | .(just xโ) = injโ (cong just xโ) 

  lem' : s {A} โก just โ s {A} โก const nothing
  lem' = {!!}


  final : (x : A) โ TS (ST s) x โก s x
  final with lem' 
  final | injโ x = {!!}
  final | injโ y = {!!} 

{-
module Easy
         {F : โ โ โ}
         (Fแตฃ : ([โ] [โ] [โ]) F)
--         (Fแตฃ-refl : โ {A} {Aแตฃ : Rel A _} โ Reflexive Aแตฃ โ Reflexive (Fแตฃ Aแตฃ))
         {mapF  : โ {A B} โ (A โ B) โ F A โ F B}
         (mapFแตฃ : (โโจ Aแตฃ โถ [โ] โฉ[โ] โโจ Bแตฃ โถ [โ] โฉ[โ] (Aแตฃ [โ] Bแตฃ) [โ] Fแตฃ Aแตฃ [โ] Fแตฃ Bแตฃ) mapF)
  (s : โ {W} โ W โ F W)
  (sR : (โโจ Aแตฃ โถ [โ] โฉ[โ]  Aแตฃ [โ] Fแตฃ Aแตฃ) s)
  (A : โ)  
  (Aแตฃ : [โ] A)
  -- (Aแตฃ-refl : Reflexive Aแตฃ) 
    where

   u : โ (x : A) โ Fแตฃ (ฮป y โ y โก x) (s x) 
   u x = sR (ฮป y โ y โก x) refl
-}

module Nat
         {F  : โ โ โ}
         (Fแตฃ : (โฆโโง โฆโโง โฆโโง) F F)
         (mapF  : โ {A B} โ (A โ B) โ F A โ F B)
         (mapFแตฃ : (โโจ Aแตฃ โถ โฆโโง โฉโฆโโง โโจ Bแตฃ โถ โฆโโง โฉโฆโโง (Aแตฃ โฆโโง Bแตฃ) โฆโโง Fแตฃ Aแตฃ โฆโโง Fแตฃ Bแตฃ) mapF mapF)
         (mapF-id : (โโจ Aแตฃ โถ โฆโโง โฉโฆโโง Fแตฃ Aแตฃ โฆโโง Fแตฃ Aแตฃ) (mapF id) id)
         -- (mapF-id : (โโจ Aแตฃ โถ โฆโโง โฉโฆโโง Fแตฃ Aแตฃ โฆโโง Fแตฃ Aแตฃ) id (mapF id))
         -- (mapF-id : (โโจ Aแตฃ โถ โฆโโง โฉโฆโโง Fแตฃ Aแตฃ โฆโโง Fแตฃ Aแตฃ) f (mapF id))

         -- f = map id โ g โ f = g
         -- (mapF-id : โ {Aโ Aโ} (Aแตฃ : โฆโโง Aโ Aโ) {Bโ Bโ} (Bแตฃ : โฆโโง Bโ Bโ) f g โ (Aแตฃ โฆโโง Fแตฃ Bแตฃ) f (mapF id โ g) โ (Aแตฃ โฆโโง Fแตฃ Bแตฃ) f g)

         -- f = h โ g โ h = id โ f = g
         -- (mapF-id' : โ {Aโ Aโ} (Aแตฃ : โฆโโง Aโ Aโ) {Bโ Bโ} (Bแตฃ : โฆโโง Bโ Bโ) f g โ (Aแตฃ โฆโโง Fแตฃ Bแตฃ) f ( โ g) โ (Aแตฃ โฆโโง Fแตฃ Bแตฃ) f g)

         -- f = id โ g โ f = g
         (ฮฑ  : โ {X} โ X โ F X)
         (ฮฑแตฃ : (โโจ Xแตฃ โถ โฆโโง โฉโฆโโง Xแตฃ โฆโโง Fแตฃ Xแตฃ) ฮฑ ฮฑ)
         (X  : โ)
         (Xแตฃ : โฆโโง X X)
         (Y  : โ)
         (Yแตฃ : โฆโโง Y Y)
         (f  : X โ Y)
         (fแตฃ : (Xแตฃ โฆโโง Yแตฃ) f f)
         where
  open RelOf {X} {Y} Yแตฃ
  
  {-
  C : (F Y โ F Y) โ X โ F Y
  C g = g โ ฮฑ โ f
  foo : (Xแตฃ โฆโโง Fแตฃ Yแตฃ) (C (mapF id)) (C id)
  foo = {!!}
  -}
  nat' : (Xแตฃ โฆโโง Fแตฃ Yแตฃ) (mapF f โ ฮฑ) (mapF id โ ฮฑ โ f)
  nat' {xโ} {xโ} xแตฃ = mapFแตฃ (โจ f โฉ) Yแตฃ {f} {id} id {ฮฑ xโ} {ฮฑ (f xโ)} (ฮฑแตฃ (โจ f โฉ) {xโ} {f xโ} (fแตฃ xแตฃ))
  {-
  nat : (Xแตฃ โฆโโง Fแตฃ Yแตฃ) (mapF f โ ฮฑ) (ฮฑ โ f)
  -- nat {xโ} {xโ} xแตฃ = mapF-id Xแตฃ Yแตฃ (mapF f โ ฮฑ) (ฮฑ โ f) nat' {xโ} {xโ} xแตฃ
  nat {xโ} {xโ} xแตฃ = {!foo!}
  -}


module Iso
         {F : โ โ โ}
         (Fแตฃ : (โฆโโง โฆโโง โฆโโง) F F)
         (Fแตฃ-refl : โ {A} {Aแตฃ : Rel A _} โ Reflexive Aแตฃ โ Reflexive (Fแตฃ Aแตฃ))
         {mapF  : โ {A B} โ (A โ B) โ F A โ F B}
         (mapFแตฃ : (โโจ Aแตฃ โถ โฆโโง โฉโฆโโง โโจ Bแตฃ โถ โฆโโง โฉโฆโโง (Aแตฃ โฆโโง Bแตฃ) โฆโโง Fแตฃ Aแตฃ โฆโโง Fแตฃ Bแตฃ) mapF mapF)
         --(mapF-id : โ {Aโ Aโ} (Aแตฃ : โฆโโง Aโ Aโ) โ (Fแตฃ Aแตฃ โฆโโง Fแตฃ Aแตฃ) id (mapF id))
         --(mapF-id : โ {Aโ Aโ} (Aแตฃ : โฆโโง Aโ Aโ) โ (Fแตฃ Aแตฃ โฆโโง Fแตฃ Aแตฃ) (mapF id) id)
         where
  S = โ {B} โ B โ F B
  โฆSโง = โโจ Bแตฃ โถ โฆโโง โฉโฆโโง Bแตฃ โฆโโง Fแตฃ Bแตฃ
  T = F ๐
  โฆTโง = Fแตฃ โฆ๐โง
  โฆTโง-refl : Reflexive โฆTโง
  โฆTโง-refl = Fแตฃ-refl _
  ST : S โ T
  ST s = s tt
  โฆSTโง : (โฆSโง โฆโโง โฆTโง) ST ST
  โฆSTโง sแตฃ = sแตฃ _ โฆttโง
  TS : T โ S
  TS t b = mapF (const b) t
  โฆTSโง : (โฆTโง โฆโโง โฆSโง) TS TS
  โฆTSโง tแตฃ Bแตฃ bแตฃ = mapFแตฃ _ _ (const bแตฃ) tแตฃ

  TST = ST โ TS
  โฆTSTโง = ฮป {tโ tโ} (tแตฃ : โฆTโง tโ tโ) โ โฆSTโง (โฆTSโง tแตฃ)
  -- mapF id โก id
  TST' : โ {t : F ๐} โ Fแตฃ โฆ๐โง (ST (TS t)) (mapF id t)
  TST' = โฆTSTโง โฆTโง-refl

  STS = TS โ ST
  โฆSTSโง = ฮป {tโ tโ : S} (tแตฃ : โฆSโง tโ tโ) โ (ฮป {x} {y} โ โฆTSโง (โฆSTโง tแตฃ) {x} {y})
  
  const๐ : โ {A} โ A โ ๐ โ A
  const๐ x _ = x

  -- Fแตฃ (ฮป _ _ โ ๐) โ ฮป _ _ โ ๐
{-

ฮฑ(X) : X โ F X

        ฮฑ(X)
   X ---------โ F X
   โ            โ
  R|            |F R
   โ            โ
   Y ---------โ F Y
        ฮฑ(Y)
-}

  {-
  module _ (ฮฑ : โ {X} โ X โ F X) {X Y : โ} (R : X โ Y โ โ) (x : X) where
    nat : mapF R (ฮฑ x) โก ฮฑ (R x)
    nat = {!!}
  -}

  module _ (ฮฑ : โ {X} โ X โ F X) {X Y : โ} (f : X โ Y) (x : X) where
    nat : mapF f (ฮฑ x) โก ฮฑ (f x)
    nat = {!!}

    {-
    Fแตฃ' = ฮป FYแตฃ โ RelOf.โจ_โฉ FYแตฃ (mapF f)
    FแตฃโFแตฃ' : โ {Xแตฃ} {x y} โ Fแตฃ Xแตฃ x y โ Fแตฃ' Xแตฃ x y
    FแตฃโFแตฃ' = ?

    open RelOf {X} {Y} _โก_
    nat'' : Fแตฃ _โก_ (mapF f (ฮฑ x)) (mapF id (ฮฑ (f x)))
    nat'' = mapFแตฃ (โจ f โฉ) _โก_ {f} {id} sym {ฮฑ x} {ฮฑ (f x)} {!!}

    nat' : Fแตฃ _โก_ (mapF f (ฮฑ x)) (ฮฑ (f x))
    nat' = {!mapFแตฃ ? _โก_ {f} {id} ? {ฮฑ x} {ฮฑ (f x)} ?!}

  module _ (ฮฑ : โ {X} โ X โ F X) {Y : โ} (y : Y) where
    scratch : mapF (ฮป _ โ y) (ฮฑ tt) โก ฮฑ y
    scratch = nat ฮฑ {๐} {Y} (ฮป _ โ y) tt
    scratch' : Fแตฃ _ (mapF (ฮป _ โ y) (ฮฑ tt)) (ฮฑ y)
    scratch' = nat' ฮฑ {๐} {Y} (ฮป _ โ y) tt

  bla' : โ (s : S) (X : โ) (Xแตฃ : โฆโโง X X) (x : X) โ Fแตฃ Xแตฃ (mapF (const๐ x) (s tt)) (s x)
  bla' s X Xแตฃ x = let k = mapFแตฃ {๐} {X} (ฮป _ _ โ ๐) Xแตฃ {const๐ x} {id} {!!} {s tt} {s x} {!!} in {!scratch' s {X} x!}
    where open RelOf {{!!}} {{!!}} {!!}

  bla : โ (s : S) (X : โ) (Xแตฃ : โฆโโง X X) (x : X) โ Fแตฃ Xแตฃ (TS (ST s) x) (s x)
  bla s X Xแตฃ x = bla' s X Xแตฃ x

  {-
  โฆSโง-refl : Reflexive โฆSโง
  โฆSโง-refl {s} {Bโ} {Bโ} Bแตฃ {bโ} {bโ} bแตฃ = {!!}
  -}

  {-
  {-
module Iso
         {F : โ โ โ}
         (Fแตฃ : (โฆโโง โฆโโง โฆโโง) F F)
         (Fแตฃ-refl : โ {A} {Aแตฃ : Rel A _} โ Reflexive Aแตฃ โ Reflexive (Fแตฃ Aแตฃ))
         {mapF  : โ {A B} โ (A โ B) โ F A โ F B}
         (mapFแตฃ : (โโจ Aแตฃ โถ โฆโโง โฉโฆโโง โโจ Bแตฃ โถ โฆโโง โฉโฆโโง (Aแตฃ โฆโโง Bแตฃ) โฆโโง Fแตฃ Aแตฃ โฆโโง Fแตฃ Bแตฃ) mapF mapF)
         --(mapF-id : โ {Aโ Aโ} (Aแตฃ : โฆโโง Aโ Aโ) โ (Fแตฃ Aแตฃ โฆโโง Fแตฃ Aแตฃ) id (mapF id))
         --(mapF-id : โ {Aโ Aโ} (Aแตฃ : โฆโโง Aโ Aโ) โ (Fแตฃ Aแตฃ โฆโโง Fแตฃ Aแตฃ) (mapF id) id)
         {A}
         (Aแตฃ : โฆโโง A A)
         (Aแตฃ-refl : Reflexive Aแตฃ) where
  Aแตฃ+1 = Aแตฃ โฆโโง โฆ๐โง
  S = โ {B} โ B โ F (A โ B)
  โฆSโง = โโจ Bแตฃ โถ โฆโโง โฉโฆโโง Bแตฃ โฆโโง Fแตฃ (Aแตฃ โฆโโง Bแตฃ)
  T = F (A โ ๐)
  โฆTโง = Fแตฃ Aแตฃ+1
  โฆTโง-refl : Reflexive โฆTโง
  โฆTโง-refl = Fแตฃ-refl (โฆโโง-refl _ Aแตฃ-refl _ _)
  ST : S โ T
  ST s = s tt
  โฆSTโง : (โฆSโง โฆโโง โฆTโง) ST ST
  โฆSTโง sแตฃ = sแตฃ _ โฆttโง
  TS : T โ S
  TS t {B} b = mapF (map-โ id (const b)) t

  โฆTSโง : (โฆTโง โฆโโง โฆSโง) TS TS
  โฆTSโง tแตฃ Bแตฃ bแตฃ = mapFแตฃ _ _ (โฆmap-โโง _ _ _ _ id (const bแตฃ)) tแตฃ

  TST = ST โ TS
  โฆTSTโง = ฮป {tโ tโ} (tแตฃ : โฆTโง tโ tโ) โ โฆSTโง (โฆTSโง tแตฃ)
  -- mapF id โก id
  TST' : โ {t} โ Fแตฃ Aแตฃ+1 (ST (TS t)) (mapF (map-โ id id) t)
  TST' = โฆTSTโง โฆTโง-refl
  STS = TS โ ST
  โฆSTSโง = ฮป {tโ tโ : S} (tแตฃ : โฆSโง tโ tโ) โ (ฮป {x} {y} โ โฆTSโง (โฆSTโง tแตฃ) {x} {y})
  -- UNFINISHED
  
  โฆSโง-refl : Reflexive โฆSโง
  โฆSโง-refl {s} {Bโ} {Bโ} Bแตฃ {bโ} {bโ} bแตฃ = {!!}

  bla : โ (s : S) โ Fแตฃ Aแตฃ+1 (TS (ST s) tt) (mapF (map-โ id (const tt)) (s tt))
  bla s = โฆSTSโง (โฆSโง-refl {s}) โฆ๐โง {tt} _
  bla' : โ (s : S) {B} (b : B) โ Fแตฃ (Aแตฃ โฆโโง {!!}) (TS (ST s) b) (mapF (map-โ id (const b)) (s b))
  bla' s {B} b = {!โฆSTSโง (โฆSโง-refl {s}) ? {b} _ !}
  STS' : โ (x : S) {B} (Bแตฃ : โฆโโง B B) {b} (bแตฃ : Bแตฃ b b) โ Fแตฃ (Aแตฃ โฆโโง Bแตฃ) (TS (ST x) {B} b) (x b) -- (mapF (map-โ id id) x)
  STS' x {B} Bแตฃ {b} bแตฃ = let k = โฆSTSโง {x} {ฮป {B} b โ {!!}} {!!} Bแตฃ {b} {b} bแตฃ in {!k!} -- {!mapFแตฃ ? (Aแตฃ โฆโโง Bแตฃ) (โฆmap-โโง _ _ _ _ id ?)!}
 
 
  lemma : โ (s : S) {B} (b : B) โ  Fแตฃ (Aแตฃ โฆโโง Always) (s b) (s tt)
  lemma s {B} b = โฆSโง-refl {s} {B} {๐} Always {b} {_} tt

  STS'' : โ (s : S) {B} (b : B) โ Fแตฃ (Aแตฃ โฆโโง Always) (mapF (map-โ id (const b)) (s tt)) (s b)
  STS'' s {B} b  = {! mapFแตฃ _ _ (โฆmap-โโง _ _ _ _ id (const ?)) (lemma s b)  !}


  {- STS : โ (x : S) โ (ฮป {B} โ TS (ST x) {B}) โก x
  STS x = {!!}
  TST' : โ (t : T) โ โฆTโง (ST (TS t)) (mapF id t)
  TST' t = mapFแตฃ (Aแตฃ โฆโโง โฆ๐โง) _ (ฮป xแตฃ โ {!โฆmap-โโง _ _ _ _ id ? xแตฃ!}) (Fแตฃ-refl {!!})
  -- -}

module TestIso = Iso {Maybe} โฆMaybeโง (ฮป r {x} โ โฆMaybeโง-Properties.refl (ฮป _ โ r) x) {map?} โฆmap?โง {โ} _โก_ refl
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
