{-# OPTIONS --type-in-type #-}
module Iso where

open import Type
open import Function
open import Data.Sum.NP renaming (map to map-โ; โฆmapโง to โฆmap-โโง)
open import Relation.Binary.Logical hiding (โฆโโง) renaming (โฆโโโง to โฆโโง) -- ; โฆโคโง to โฆ๐โง)
open import Relation.Unary.Logical hiding ([โ]) renaming ([โโ] to [โ]) -- ; โฆโคโง to โฆ๐โง)
open import Relation.Binary.PropositionalEquality hiding ([_])
open import Data.Nat
open import Data.Maybe.NP
open import Data.Empty -- renaming (โฅ to ๐)
open import Data.Unit -- renaming (โค to ๐)
open import Data.Nat.Logical
open import Relation.Binary


module Reboot 
  (s : โ {W} -> W -> W)
  (sR : (โโจ Wแตฃ โถ โฆโโง โฉโฆโโง  Wแตฃ โฆโโง Wแตฃ) s s)
  (A : โ)  
    where

   u : โ (x : A) -> s x โก x
   u x =  sR {โ} (\_ y -> y โก x) {zero} refl 

data [Maybe] {A} Ap : Maybe A -> โ where
  nothing : [Maybe] Ap nothing
  just : (Ap [โ] [Maybe] Ap) just


module MaybeF2
  (s : โ {W} -> W -> Maybe W)
  (sR : (โโจ Wแตฃ โถ โฆโโง โฉโฆโโง  Wแตฃ โฆโโง โฆMaybeโง Wแตฃ) s s)
  (A : โ)
    where

  S = โ {W} -> W -> Maybe W 
  โฆSโง = โโจ Bแตฃ โถ โฆโโง โฉโฆโโง Bแตฃ โฆโโง โฆMaybeโง Bแตฃ

  T = Maybe โค
  โฆTโง = โฆMaybeโง โฆโคโง

  TS : T -> S
  TS (just tt) = just 
  TS nothing = ฮป x โ nothing

  ST : S -> T
  ST s = s tt

  test : {!!}
  test = {!sR (\x -> !} 


module MaybeF 
  (s : โ {W} -> W -> Maybe W)
  (sR : (โโจ Wแตฃ โถ [โ] โฉ[โ]  Wแตฃ [โ] [Maybe] Wแตฃ) s)
  (A : โ)
    where

  S = โ {W} -> W -> Maybe W 
  [S] = โโจ Bแตฃ โถ [โ] โฉ[โ] Bแตฃ [โ] [Maybe] Bแตฃ

  T = Maybe โค
  [T] = [Maybe] [โค]

  TS : T -> S
  TS (just tt) = just 
  TS nothing = ฮป x โ nothing

  ST : S -> T
  ST s = s tt

  u' : โ (x : A) -> [Maybe] (ฮป y โ y โก x) (s x)
  u' x = sR (ฮป y โ y โก x) refl


  u'' : โ (x : A) -> [Maybe] (ฮป y โ y โก x) (s x)
  u'' x = sR (ฮป y โ y โก x) refl


  lem : (x : A) -> [Maybe] (ฮป y โ y โก x) (s x) -> s x โก just x โ s x โก nothing
  lem  x t with s x
  lem x nothing | .nothing = injโ refl
  lem x (just {xโ} xโ) | .(just xโ) = injโ (cong just xโ) 

  lem' : s {A} โก just โ s {A} โก const nothing
  lem' = {!!}


  final : (x : A) -> TS (ST s) x โก s x
  final with lem' 
  final | injโ x = {!!}
  final | injโ y = {!!} 

{-
module Easy
         {F : โ โ โ}
         (Fแตฃ : ([โ] [โ] [โ]) F)
--         (Fแตฃ-refl : โ {A} {Aแตฃ : Rel A _} โ Reflexive Aแตฃ โ Reflexive (Fแตฃ Aแตฃ))
         {mapF  : โ {A B} โ (A โ B) โ F A โ F B}
         (mapFแตฃ : (โโจ Aแตฃ โถ [โ] โฉ[โ] โโจ Bแตฃ โถ [โ] โฉ[โ] (Aแตฃ [โ] Bแตฃ) [โ] Fแตฃ Aแตฃ [โ] Fแตฃ Bแตฃ) mapF)
  (s : โ {W} -> W -> F W)
  (sR : (โโจ Wแตฃ โถ [โ] โฉ[โ]  Wแตฃ [โ] Fแตฃ Wแตฃ) s)
  (A : โ)  
  (Aแตฃ : [โ] A)
  -- (Aแตฃ-refl : Reflexive Aแตฃ) 
    where

   u : โ (x : A) -> Fแตฃ (ฮป y โ y โก x) (s x) 
   u x = sR (ฮป y โ y โก x) refl
-}


{-
module Iso
         {F : โ โ โ}
         (Fแตฃ : (โฆโโง โฆโโง โฆโโง) F F)
         (Fแตฃ-refl : โ {A} {Aแตฃ : Rel A _} โ Reflexive Aแตฃ โ Reflexive (Fแตฃ Aแตฃ))
         {mapF  : โ {A B} โ (A โ B) โ F A โ F B}
         (mapFแตฃ : (โโจ Aแตฃ โถ โฆโโง โฉโฆโโง โโจ Bแตฃ โถ โฆโโง โฉโฆโโง (Aแตฃ โฆโโง Bแตฃ) โฆโโง Fแตฃ Aแตฃ โฆโโง Fแตฃ Bแตฃ) mapF mapF)
         --(mapF-id : โ {Aโ Aโ} (Aแตฃ : โฆโโง Aโ Aโ) โ (Fแตฃ Aแตฃ โฆโโง Fแตฃ Aแตฃ) id (mapF id))
         --(mapF-id : โ {Aโ Aโ} (Aแตฃ : โฆโโง Aโ Aโ) โ (Fแตฃ Aแตฃ โฆโโง Fแตฃ Aแตฃ) (mapF id) id)
         {A}
         (Aแตฃ : โฆโโง A A)
         (Aแตฃ-refl : Reflexive Aแตฃ) where
  Aแตฃ+1 = Aแตฃ โฆโโง โฆโคโง
  S = โ {B} โ B โ F (A โ B)
  โฆSโง = โโจ Bแตฃ โถ โฆโโง โฉโฆโโง Bแตฃ โฆโโง Fแตฃ (Aแตฃ โฆโโง Bแตฃ)
  T = F (A โ โค)
  โฆTโง = Fแตฃ Aแตฃ+1
  โฆTโง-refl : Reflexive โฆTโง
  โฆTโง-refl = Fแตฃ-refl (โฆโโง-refl _ Aแตฃ-refl _ _)
  ST : S โ T
  ST s = s tt
  โฆSTโง : (โฆSโง โฆโโง โฆTโง) ST ST
  โฆSTโง sแตฃ = sแตฃ _ โฆttโง
  TS : T โ S
  TS t {B} b = mapF (map-โ id (const b)) t

  โฆTSโง : (โฆTโง โฆโโง โฆSโง) TS TS
  โฆTSโง tแตฃ Bแตฃ bแตฃ = mapFแตฃ _ _ (โฆmap-โโง _ _ _ _ id (const bแตฃ)) tแตฃ

  TST = ST โ TS
  โฆTSTโง = ฮป {tโ tโ} (tแตฃ : โฆTโง tโ tโ) โ โฆSTโง (โฆTSโง tแตฃ)
  -- mapF id โก id
  TST' : โ {t} โ Fแตฃ Aแตฃ+1 (ST (TS t)) (mapF (map-โ id id) t)
  TST' = โฆTSTโง โฆTโง-refl
  STS = TS โ ST
  โฆSTSโง = ฮป {tโ tโ : S} (tแตฃ : โฆSโง tโ tโ) โ (ฮป {x} {y} โ โฆTSโง (โฆSTโง tแตฃ) {x} {y})
  -- UNFINISHED
  
  โฆSโง-refl : Reflexive โฆSโง
  โฆSโง-refl {s} {Bโ} {Bโ} Bแตฃ {bโ} {bโ} bแตฃ = {!!}

  bla : โ (s : S) โ Fแตฃ Aแตฃ+1 (TS (ST s) tt) (mapF (map-โ id (const tt)) (s tt))
  bla s = โฆSTSโง (โฆSโง-refl {s}) โฆโคโง {tt} _
  bla' : โ (s : S) {B} (b : B) โ Fแตฃ (Aแตฃ โฆโโง {!!}) (TS (ST s) b) (mapF (map-โ id (const b)) (s b))
  bla' s {B} b = {!โฆSTSโง (โฆSโง-refl {s}) ? {b} _ !}
  STS' : โ (x : S) {B} (Bแตฃ : โฆโโง B B) {b} (bแตฃ : Bแตฃ b b) โ Fแตฃ (Aแตฃ โฆโโง Bแตฃ) (TS (ST x) {B} b) (x b) -- (mapF (map-โ id id) x)
  STS' x {B} Bแตฃ {b} bแตฃ = let k = โฆSTSโง {x} {ฮป {B} b โ {!!}} {!!} Bแตฃ {b} {b} bแตฃ in {!k!} -- {!mapFแตฃ ? (Aแตฃ โฆโโง Bแตฃ) (โฆmap-โโง _ _ _ _ id ?)!}

  Full : โ {A B} -> A -> B -> Set
  Full _ _ = โค
 
 
  lemma : โ (s : S) {B} (b : B) ->  Fแตฃ (Aแตฃ โฆโโง Full) (s b) (s tt)
  lemma s {B} b = โฆSโง-refl {s} {B} {โค} Full {b} {_} tt

  STS'' : โ (s : S) {B} (b : B) -> Fแตฃ (Aแตฃ โฆโโง Full) (mapF (map-โ id (const b)) (s tt)) (s b)
  STS'' s {B} b  = {! mapFแตฃ _ _ (โฆmap-โโง _ _ _ _ id (const ?)) (lemma s b)  !}


  {- STS : โ (x : S) โ (ฮป {B} โ TS (ST x) {B}) โก x
  STS x = {!!}
  TST' : โ (t : T) โ โฆTโง (ST (TS t)) (mapF id t)
  TST' t = mapFแตฃ (Aแตฃ โฆโโง โฆ๐โง) _ (ฮป xแตฃ โ {!โฆmap-โโง _ _ _ _ id ? xแตฃ!}) (Fแตฃ-refl {!!})
  -- -}

module TestIso = Iso {Maybe} โฆMaybeโง (ฮป r {x} โ โฆMaybeโง-Properties.refl (ฮป _ โ r) x) {map?} โฆmap?โง {โ} _โก_ refl
-- -}
-- -}
-- -}
