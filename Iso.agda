{-# OPTIONS --type-in-type #-}
module Iso where

open import Type
open import Function
open import Data.Sum.NP renaming (map to map-โ; โฆmapโง to โฆmap-โโง)
open import Relation.Binary.Logical hiding (โฆโโง) renaming (โฆโโโง to โฆโโง; โฆโคโง to โฆ๐โง)
open import Relation.Binary.PropositionalEquality hiding ([_])
open import Data.Nat
open import Data.Maybe.NP
open import Data.Empty renaming (โฅ to ๐)
open import Data.Unit renaming (โค to ๐)
open import Data.Nat.Logical
open import Relation.Binary


module Iso
         {F : โ โ โ}
         (Fแตฃ : (โฆโโง โฆโโง โฆโโง) F F)
         (Fแตฃ-refl : โ {A} {Aแตฃ : Rel A _} โ Reflexive Aแตฃ โ Reflexive (Fแตฃ Aแตฃ))
         {mapF  : โ {A B} โ (A โ B) โ F A โ F B}
         (mapFแตฃ : (โโจ Aแตฃ โถ โฆโโง โฉโฆโโง โโจ Bแตฃ โถ โฆโโง โฉโฆโโง (Aแตฃ โฆโโง Bแตฃ) โฆโโง Fแตฃ Aแตฃ โฆโโง Fแตฃ Bแตฃ) mapF mapF)
         --(mapF-id : โ {Aโ Aโ} (Aแตฃ : โฆโโง Aโ Aโ) โ (Fแตฃ Aแตฃ โฆโโง Fแตฃ Aแตฃ) id (mapF id))
         --(mapF-id : โ {Aโ Aโ} (Aแตฃ : โฆโโง Aโ Aโ) โ (Fแตฃ Aแตฃ โฆโโง Fแตฃ Aแตฃ) (mapF id) id)
         {A}
         (Aแตฃ : โฆโโง A A)
         (Aแตฃ-refl : Reflexive Aแตฃ) where
  Aแตฃ+1 = Aแตฃ โฆโโง โฆ๐โง
  S = โ {B} โ B โ F (A โ B)
  โฆSโง = โโจ Bแตฃ โถ โฆโโง โฉโฆโโง Bแตฃ โฆโโง Fแตฃ (Aแตฃ โฆโโง Bแตฃ)
  T = F (A โ ๐)
  โฆTโง = Fแตฃ Aแตฃ+1
  โฆTโง-refl : Reflexive โฆTโง
  โฆTโง-refl = Fแตฃ-refl (โฆโโง-refl _ Aแตฃ-refl _ _)
  ST : S โ T
  ST s = s tt
  โฆSTโง : (โฆSโง โฆโโง โฆTโง) ST ST
  โฆSTโง sแตฃ = sแตฃ _ โฆttโง
  TS : T โ S
  TS t {B} b = mapF (map-โ id (const b)) t
  โฆTSโง : (โฆTโง โฆโโง โฆSโง) TS TS
  โฆTSโง tแตฃ Bแตฃ bแตฃ = mapFแตฃ _ _ (โฆmap-โโง _ _ _ _ id (const bแตฃ)) tแตฃ
  TST = ST โ TS
  โฆTSTโง = ฮป {tโ tโ} (tแตฃ : โฆTโง tโ tโ) โ โฆSTโง (โฆTSโง tแตฃ)
  -- mapF id โก id
  TST' : โ {t} โ Fแตฃ Aแตฃ+1 (ST (TS t)) (mapF (map-โ id id) t)
  TST' = โฆTSTโง โฆTโง-refl
  STS = TS โ ST
  โฆSTSโง = ฮป {tโ tโ : S} (tแตฃ : โฆSโง tโ tโ) โ (ฮป {x} {y} โ โฆTSโง (โฆSTโง tแตฃ) {x} {y})
  -- UNFINISHED
  {-
  โฆSโง-refl : Reflexive โฆSโง
  โฆSโง-refl {s} {Bโ} {Bโ} Bแตฃ {bโ} {bโ} bแตฃ = {!!}
  bla : โ (s : S) โ Fแตฃ Aแตฃ+1 (TS (ST s) tt) (mapF (map-โ id (const tt)) (s tt))
  bla s = โฆSTSโง (โฆSโง-refl {s}) โฆ๐โง {tt} _
  bla' : โ (s : S) {B} (b : B) โ Fแตฃ (Aแตฃ โฆโโง {!!}) (TS (ST s) b) (mapF (map-โ id (const b)) (s b))
  bla' s {B} b = {!โฆSTSโง (โฆSโง-refl {s}) ? {b} _ !}
  STS' : โ (x : S) {B} (Bแตฃ : โฆโโง B B) {b} (bแตฃ : Bแตฃ b b) โ Fแตฃ (Aแตฃ โฆโโง Bแตฃ) (TS (ST x) {B} b) (x b) -- (mapF (map-โ id id) x)
  STS' x {B} Bแตฃ {b} bแตฃ = let k = โฆSTSโง {x} {ฮป {B} b โ {!!}} {!!} Bแตฃ {b} {b} bแตฃ in {!k!} -- {!mapFแตฃ ? (Aแตฃ โฆโโง Bแตฃ) (โฆmap-โโง _ _ _ _ id ?)!}
  STS : โ (x : S) โ (ฮป {B} โ TS (ST x) {B}) โก x
  STS x = {!!}
  TST' : โ (t : T) โ โฆTโง (ST (TS t)) (mapF id t)
  TST' t = mapFแตฃ (Aแตฃ โฆโโง โฆ๐โง) _ (ฮป xแตฃ โ {!โฆmap-โโง _ _ _ _ id ? xแตฃ!}) (Fแตฃ-refl {!!})
  -}

module TestIso = Iso {Maybe} โฆMaybeโง (ฮป r {x} โ โฆMaybeโง-Properties.refl (ฮป _ โ r) x) {map?} โฆmap?โง {โ} _โก_ refl
